//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LMS_Datas
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LoyaltyManagementSystemEntities : DbContext
    {
        public LoyaltyManagementSystemEntities()
            : base("name=LoyaltyManagementSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<CardRecharge> CardRecharges { get; set; }
        public virtual DbSet<city> cities { get; set; }
        public virtual DbSet<country> countries { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerCard> CustomerCards { get; set; }
        public virtual DbSet<CustomerPoint> CustomerPoints { get; set; }
        public virtual DbSet<CustomerVoucher> CustomerVouchers { get; set; }
        public virtual DbSet<Desk> Desks { get; set; }
        public virtual DbSet<Discountper> Discountpers { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<PayMode> PayModes { get; set; }
        public virtual DbSet<Point> Points { get; set; }
        public virtual DbSet<state> states { get; set; }
        public virtual DbSet<SuperAdmin> SuperAdmins { get; set; }
        public virtual DbSet<TransactionDetail> TransactionDetails { get; set; }
        public virtual DbSet<TransferVoucher> TransferVouchers { get; set; }
        public virtual DbSet<Voucher> Vouchers { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<Card1> Card1 { get; set; }
    
        public virtual ObjectResult<InsertUpdateSelectAdmin_Result> InsertUpdateSelectAdmin(Nullable<int> aId, string name, string address, string mobileNo, string emailId, string gender, Nullable<System.DateTime> dOB, Nullable<int> countryId, Nullable<int> stateId, Nullable<int> cityId, Nullable<int> aMode, Nullable<bool> active)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectAdmin_Result>("InsertUpdateSelectAdmin", aIdParameter, nameParameter, addressParameter, mobileNoParameter, emailIdParameter, genderParameter, dOBParameter, countryIdParameter, stateIdParameter, cityIdParameter, aModeParameter, activeParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectAdminLogin_Result> InsertUpdateSelectAdminLogin(Nullable<int> aId, Nullable<int> adminId, string userName, string password, Nullable<int> aMode)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("AdminId", adminId) :
                new ObjectParameter("AdminId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectAdminLogin_Result>("InsertUpdateSelectAdminLogin", aIdParameter, adminIdParameter, userNameParameter, passwordParameter, aModeParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectCard_Result> InsertUpdateSelectCard(Nullable<int> aId, string cardName, Nullable<System.DateTime> validFrom, Nullable<System.DateTime> validTo, Nullable<int> discountPer, Nullable<int> packageId, Nullable<int> aMode, Nullable<bool> active, Nullable<int> person)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var cardNameParameter = cardName != null ?
                new ObjectParameter("CardName", cardName) :
                new ObjectParameter("CardName", typeof(string));
    
            var validFromParameter = validFrom.HasValue ?
                new ObjectParameter("ValidFrom", validFrom) :
                new ObjectParameter("ValidFrom", typeof(System.DateTime));
    
            var validToParameter = validTo.HasValue ?
                new ObjectParameter("ValidTo", validTo) :
                new ObjectParameter("ValidTo", typeof(System.DateTime));
    
            var discountPerParameter = discountPer.HasValue ?
                new ObjectParameter("DiscountPer", discountPer) :
                new ObjectParameter("DiscountPer", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var personParameter = person.HasValue ?
                new ObjectParameter("person", person) :
                new ObjectParameter("person", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectCard_Result>("InsertUpdateSelectCard", aIdParameter, cardNameParameter, validFromParameter, validToParameter, discountPerParameter, packageIdParameter, aModeParameter, activeParameter, personParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectCardRecharge_Result> InsertUpdateSelectCardRecharge(Nullable<int> aId, Nullable<int> customerId, Nullable<int> amount, Nullable<int> aMode)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectCardRecharge_Result>("InsertUpdateSelectCardRecharge", aIdParameter, customerIdParameter, amountParameter, aModeParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectCity_Result> InsertUpdateSelectCity(Nullable<int> aId, string cityName, Nullable<bool> active, Nullable<int> aMode, Nullable<int> countryId, Nullable<int> stateId)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("cityName", cityName) :
                new ObjectParameter("cityName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectCity_Result>("InsertUpdateSelectCity", aIdParameter, cityNameParameter, activeParameter, aModeParameter, countryIdParameter, stateIdParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectCountry_Result> InsertUpdateSelectCountry(Nullable<int> aId, string countryName, Nullable<bool> active, Nullable<int> aMode)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("countryName", countryName) :
                new ObjectParameter("countryName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectCountry_Result>("InsertUpdateSelectCountry", aIdParameter, countryNameParameter, activeParameter, aModeParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectCustomer_Result> InsertUpdateSelectCustomer(Nullable<int> aId, string name, string address, string mobileNo, string emailId, string gender, Nullable<System.DateTime> dOB, Nullable<int> countryId, Nullable<int> stateId, Nullable<int> cityId, Nullable<int> aMode, Nullable<bool> active)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectCustomer_Result>("InsertUpdateSelectCustomer", aIdParameter, nameParameter, addressParameter, mobileNoParameter, emailIdParameter, genderParameter, dOBParameter, countryIdParameter, stateIdParameter, cityIdParameter, aModeParameter, activeParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectCustomerCard_Result> InsertUpdateSelectCustomerCard(Nullable<int> aId, Nullable<int> customerId, Nullable<int> cardId, Nullable<int> adminId, Nullable<int> aMode, Nullable<int> deskId)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var cardIdParameter = cardId.HasValue ?
                new ObjectParameter("CardId", cardId) :
                new ObjectParameter("CardId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("AdminId", adminId) :
                new ObjectParameter("AdminId", typeof(int));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var deskIdParameter = deskId.HasValue ?
                new ObjectParameter("DeskId", deskId) :
                new ObjectParameter("DeskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectCustomerCard_Result>("InsertUpdateSelectCustomerCard", aIdParameter, customerIdParameter, cardIdParameter, adminIdParameter, aModeParameter, deskIdParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectCustomerLogin_Result> InsertUpdateSelectCustomerLogin(Nullable<int> aId, Nullable<int> customerId, string userName, string password, Nullable<int> aMode)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectCustomerLogin_Result>("InsertUpdateSelectCustomerLogin", aIdParameter, customerIdParameter, userNameParameter, passwordParameter, aModeParameter);
        }
    
        public virtual int InsertUpdateSelectCustomerPoints(Nullable<int> aId, Nullable<int> customerId, Nullable<int> points, Nullable<int> adminId, Nullable<int> aMode, Nullable<System.DateTime> dateTime)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var pointsParameter = points.HasValue ?
                new ObjectParameter("Points", points) :
                new ObjectParameter("Points", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("AdminId", adminId) :
                new ObjectParameter("AdminId", typeof(int));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSelectCustomerPoints", aIdParameter, customerIdParameter, pointsParameter, adminIdParameter, aModeParameter, dateTimeParameter);
        }
    
        public virtual int InsertUpdateSelectCustomerVoucher(Nullable<int> aId, Nullable<int> customerId, Nullable<int> voucherId, Nullable<int> adminId, Nullable<int> aMode, Nullable<int> deskId, Nullable<int> assignNo)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var voucherIdParameter = voucherId.HasValue ?
                new ObjectParameter("VoucherId", voucherId) :
                new ObjectParameter("VoucherId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("AdminId", adminId) :
                new ObjectParameter("AdminId", typeof(int));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var deskIdParameter = deskId.HasValue ?
                new ObjectParameter("DeskId", deskId) :
                new ObjectParameter("DeskId", typeof(int));
    
            var assignNoParameter = assignNo.HasValue ?
                new ObjectParameter("AssignNo", assignNo) :
                new ObjectParameter("AssignNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSelectCustomerVoucher", aIdParameter, customerIdParameter, voucherIdParameter, adminIdParameter, aModeParameter, deskIdParameter, assignNoParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectDesk_Result> InsertUpdateSelectDesk(Nullable<int> aId, string deskName, string userName, string password, Nullable<int> adminId, Nullable<int> aMode, Nullable<bool> active)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var deskNameParameter = deskName != null ?
                new ObjectParameter("DeskName", deskName) :
                new ObjectParameter("DeskName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectDesk_Result>("InsertUpdateSelectDesk", aIdParameter, deskNameParameter, userNameParameter, passwordParameter, adminIdParameter, aModeParameter, activeParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectPackage_Result> InsertUpdateSelectPackage(Nullable<int> aId, string packageName, Nullable<int> aMode, Nullable<bool> active, string packageDescription)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var packageDescriptionParameter = packageDescription != null ?
                new ObjectParameter("PackageDescription", packageDescription) :
                new ObjectParameter("PackageDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectPackage_Result>("InsertUpdateSelectPackage", aIdParameter, packageNameParameter, aModeParameter, activeParameter, packageDescriptionParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectPaymode_Result> InsertUpdateSelectPaymode(Nullable<int> aId, string payMode, Nullable<int> aMode, Nullable<bool> active)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var payModeParameter = payMode != null ?
                new ObjectParameter("PayMode", payMode) :
                new ObjectParameter("PayMode", typeof(string));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectPaymode_Result>("InsertUpdateSelectPaymode", aIdParameter, payModeParameter, aModeParameter, activeParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectPoints_Result> InsertUpdateSelectPoints(Nullable<int> aId, string amount, Nullable<int> point, Nullable<bool> active, Nullable<int> aMode)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var pointParameter = point.HasValue ?
                new ObjectParameter("Point", point) :
                new ObjectParameter("Point", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectPoints_Result>("InsertUpdateSelectPoints", aIdParameter, amountParameter, pointParameter, activeParameter, aModeParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectState_Result> InsertUpdateSelectState(Nullable<int> aId, string stateName, Nullable<bool> active, Nullable<int> aMode, Nullable<int> countryId)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("stateName", stateName) :
                new ObjectParameter("stateName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectState_Result>("InsertUpdateSelectState", aIdParameter, stateNameParameter, activeParameter, aModeParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectSuperAdmin_Result> InsertUpdateSelectSuperAdmin(Nullable<int> aId, string name, string address, string mobileNo, string emailId, string gender, Nullable<System.DateTime> dOB, Nullable<int> countryId, Nullable<int> stateId, Nullable<int> cityId, Nullable<int> aMode, Nullable<bool> active)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectSuperAdmin_Result>("InsertUpdateSelectSuperAdmin", aIdParameter, nameParameter, addressParameter, mobileNoParameter, emailIdParameter, genderParameter, dOBParameter, countryIdParameter, stateIdParameter, cityIdParameter, aModeParameter, activeParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectSuperAdminLogin_Result> InsertUpdateSelectSuperAdminLogin(Nullable<int> aId, Nullable<int> superAdminId, string userName, string password, Nullable<int> aMode)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var superAdminIdParameter = superAdminId.HasValue ?
                new ObjectParameter("SuperAdminId", superAdminId) :
                new ObjectParameter("SuperAdminId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectSuperAdminLogin_Result>("InsertUpdateSelectSuperAdminLogin", aIdParameter, superAdminIdParameter, userNameParameter, passwordParameter, aModeParameter);
        }
    
        public virtual ObjectResult<InsertUpdateSelectTransaction_Result> InsertUpdateSelectTransaction(Nullable<int> aId, Nullable<int> customerId, Nullable<int> aMode, Nullable<int> deskId, Nullable<int> assignNo, Nullable<int> totalAmount, Nullable<int> cardId, Nullable<int> payable_Amount, Nullable<int> paymode, Nullable<int> discount, Nullable<int> adminid)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var deskIdParameter = deskId.HasValue ?
                new ObjectParameter("DeskId", deskId) :
                new ObjectParameter("DeskId", typeof(int));
    
            var assignNoParameter = assignNo.HasValue ?
                new ObjectParameter("AssignNo", assignNo) :
                new ObjectParameter("AssignNo", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(int));
    
            var cardIdParameter = cardId.HasValue ?
                new ObjectParameter("CardId", cardId) :
                new ObjectParameter("CardId", typeof(int));
    
            var payable_AmountParameter = payable_Amount.HasValue ?
                new ObjectParameter("Payable_Amount", payable_Amount) :
                new ObjectParameter("Payable_Amount", typeof(int));
    
            var paymodeParameter = paymode.HasValue ?
                new ObjectParameter("Paymode", paymode) :
                new ObjectParameter("Paymode", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(int));
    
            var adminidParameter = adminid.HasValue ?
                new ObjectParameter("Adminid", adminid) :
                new ObjectParameter("Adminid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateSelectTransaction_Result>("InsertUpdateSelectTransaction", aIdParameter, customerIdParameter, aModeParameter, deskIdParameter, assignNoParameter, totalAmountParameter, cardIdParameter, payable_AmountParameter, paymodeParameter, discountParameter, adminidParameter);
        }
    
        public virtual int InsertUpdateSelectVoucher(Nullable<int> aId, Nullable<int> voucherNo, string voucherName, Nullable<System.DateTime> validFrom, Nullable<System.DateTime> validTo, Nullable<int> discountPerId, Nullable<int> packageId, Nullable<int> aMode, Nullable<bool> active)
        {
            var aIdParameter = aId.HasValue ?
                new ObjectParameter("AId", aId) :
                new ObjectParameter("AId", typeof(int));
    
            var voucherNoParameter = voucherNo.HasValue ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(int));
    
            var voucherNameParameter = voucherName != null ?
                new ObjectParameter("VoucherName", voucherName) :
                new ObjectParameter("VoucherName", typeof(string));
    
            var validFromParameter = validFrom.HasValue ?
                new ObjectParameter("ValidFrom", validFrom) :
                new ObjectParameter("ValidFrom", typeof(System.DateTime));
    
            var validToParameter = validTo.HasValue ?
                new ObjectParameter("ValidTo", validTo) :
                new ObjectParameter("ValidTo", typeof(System.DateTime));
    
            var discountPerIdParameter = discountPerId.HasValue ?
                new ObjectParameter("DiscountPerId", discountPerId) :
                new ObjectParameter("DiscountPerId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var aModeParameter = aMode.HasValue ?
                new ObjectParameter("AMode", aMode) :
                new ObjectParameter("AMode", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSelectVoucher", aIdParameter, voucherNoParameter, voucherNameParameter, validFromParameter, validToParameter, discountPerIdParameter, packageIdParameter, aModeParameter, activeParameter);
        }
    }
}
